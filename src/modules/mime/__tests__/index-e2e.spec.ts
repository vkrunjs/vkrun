import { mime } from "..";

describe("Mime", () => {
  it("Should return the correct MIME type for each tested extension", async () => {
    expect(mime.type("123")).toEqual("application/vnd.lotus-1-2-3");
    expect(mime.type("ez")).toEqual("application/andrew-inset");
    expect(mime.type("aw")).toEqual("application/applixware");
    expect(mime.type("atom")).toEqual("application/atom+xml");
    expect(mime.type("atomcat")).toEqual("application/atomcat+xml");
    expect(mime.type("atomsvc")).toEqual("application/atomsvc+xml");
    expect(mime.type("ccxml")).toEqual("application/ccxml+xml");
    expect(mime.type("cu")).toEqual("application/cu-seeme");
    expect(mime.type("davmount")).toEqual("application/davmount+xml");
    expect(mime.type("ecma")).toEqual("application/ecmascript");
    expect(mime.type("emma")).toEqual("application/emma+xml");
    expect(mime.type("epub")).toEqual("application/epub+zip");
    expect(mime.type("pfr")).toEqual("application/font-tdpfr");
    expect(mime.type("gz")).toEqual("application/x-gzip");
    expect(mime.type("tgz")).toEqual("application/x-gzip");
    expect(mime.type("stk")).toEqual("application/hyperstudio");
    expect(mime.type("jar")).toEqual("application/java-archive");
    expect(mime.type("ser")).toEqual("application/java-serialized-object");
    expect(mime.type("class")).toEqual("application/java-vm");
    expect(mime.type("json")).toEqual("application/json");
    expect(mime.type("lostxml")).toEqual("application/lost+xml");
    expect(mime.type("hqx")).toEqual("application/mac-binhex40");
    expect(mime.type("cpt")).toEqual("application/mac-compactpro");
    expect(mime.type("mrc")).toEqual("application/marc");
    expect(mime.type("ma")).toEqual("application/mathematica");
    expect(mime.type("mb")).toEqual("application/mathematica");
    expect(mime.type("nb")).toEqual("application/mathematica");
    expect(mime.type("mathml")).toEqual("text/mathml");
    expect(mime.type("mml")).toEqual("text/mathml");
    expect(mime.type("mbox")).toEqual("application/mbox");
    expect(mime.type("mscml")).toEqual("application/mediaservercontrol+xml");
    expect(mime.type("mp4s")).toEqual("application/mp4");
    expect(mime.type("doc")).toEqual("application/msword");
    expect(mime.type("dot")).toEqual("application/msword");
    expect(mime.type("wiz")).toEqual("application/msword");
    expect(mime.type("mxf")).toEqual("application/mxf");
    expect(mime.type("a")).toEqual("application/octet-stream");
    expect(mime.type("bin")).toEqual("application/octet-stream");
    expect(mime.type("bpk")).toEqual("application/octet-stream");
    expect(mime.type("deploy")).toEqual("application/octet-stream");
    expect(mime.type("dist")).toEqual("application/octet-stream");
    expect(mime.type("distz")).toEqual("application/octet-stream");
    expect(mime.type("dmg")).toEqual("application/octet-stream");
    expect(mime.type("dms")).toEqual("application/octet-stream");
    expect(mime.type("dump")).toEqual("application/octet-stream");
    expect(mime.type("elc")).toEqual("application/octet-stream");
    expect(mime.type("lha")).toEqual("application/octet-stream");
    expect(mime.type("lrf")).toEqual("application/octet-stream");
    expect(mime.type("lzh")).toEqual("application/octet-stream");
    expect(mime.type("o")).toEqual("application/octet-stream");
    expect(mime.type("obj")).toEqual("application/octet-stream");
    expect(mime.type("pkg")).toEqual("application/octet-stream");
    expect(mime.type("so")).toEqual("application/octet-stream");
    expect(mime.type("oda")).toEqual("application/oda");
    expect(mime.type("opf")).toEqual("application/oebps-package+xml");
    expect(mime.type("ogx")).toEqual("application/ogg");
    expect(mime.type("onepkg")).toEqual("application/onenote");
    expect(mime.type("onetmp")).toEqual("application/onenote");
    expect(mime.type("onetoc")).toEqual("application/onenote");
    expect(mime.type("onetoc2")).toEqual("application/onenote");
    expect(mime.type("xer")).toEqual("application/patch-ops-error+xml");
    expect(mime.type("pdf")).toEqual("application/pdf");
    expect(mime.type("pgp")).toEqual("application/pgp-encrypted");
    expect(mime.type("asc")).toEqual("application/pgp-signature");
    expect(mime.type("sig")).toEqual("application/pgp-signature");
    expect(mime.type("prf")).toEqual("application/pics-rules");
    expect(mime.type("p10")).toEqual("application/pkcs10");
    expect(mime.type("p7c")).toEqual("application/pkcs7-mime");
    expect(mime.type("p7m")).toEqual("application/pkcs7-mime");
    expect(mime.type("p7s")).toEqual("application/pkcs7-signature");
    expect(mime.type("cer")).toEqual("application/pkix-cert");
    expect(mime.type("crl")).toEqual("application/pkix-crl");
    expect(mime.type("pkipath")).toEqual("application/pkix-pkipath");
    expect(mime.type("pki")).toEqual("application/pkixcmp");
    expect(mime.type("pls")).toEqual("application/pls+xml");
    expect(mime.type("ai")).toEqual("application/postscript");
    expect(mime.type("eps")).toEqual("application/postscript");
    expect(mime.type("ps")).toEqual("application/postscript");
    expect(mime.type("prql")).toEqual("application/prql");
    expect(mime.type("cww")).toEqual("application/prs.cww");
    expect(mime.type("rdf")).toEqual("application/rdf+xml");
    expect(mime.type("rif")).toEqual("application/reginfo+xml");
    expect(mime.type("rnc")).toEqual("application/relax-ng-compact-syntax");
    expect(mime.type("rl")).toEqual("application/resource-lists+xml");
    expect(mime.type("rld")).toEqual("application/resource-lists-diff+xml");
    expect(mime.type("rs")).toEqual("application/rls-services+xml");
    expect(mime.type("rsd")).toEqual("application/rsd+xml");
    expect(mime.type("rss")).toEqual("application/rss+xml");
    expect(mime.type("xml")).toEqual("application/xml");
    expect(mime.type("rtf")).toEqual("application/rtf");
    expect(mime.type("sbml")).toEqual("application/sbml+xml");
    expect(mime.type("scq")).toEqual("application/scvp-cv-request");
    expect(mime.type("scs")).toEqual("application/scvp-cv-response");
    expect(mime.type("spq")).toEqual("application/scvp-vp-request");
    expect(mime.type("spp")).toEqual("application/scvp-vp-response");
    expect(mime.type("sdp")).toEqual("application/sdp");
    expect(mime.type("setpay")).toEqual("application/set-payment-initiation");
    expect(mime.type("setreg")).toEqual("application/set-registration-initiation");
    expect(mime.type("shf")).toEqual("application/shf+xml");
    expect(mime.type("smi")).toEqual("application/smil+xml");
    expect(mime.type("smil")).toEqual("application/smil+xml");
    expect(mime.type("rq")).toEqual("application/sparql-query");
    expect(mime.type("srx")).toEqual("application/sparql-results+xml");
    expect(mime.type("gram")).toEqual("application/srgs");
    expect(mime.type("grxml")).toEqual("application/srgs+xml");
    expect(mime.type("ssml")).toEqual("application/ssml+xml");
    expect(mime.type("plb")).toEqual("application/vnd.3gpp.pic-bw-large");
    expect(mime.type("psb")).toEqual("application/vnd.3gpp.pic-bw-small");
    expect(mime.type("pvb")).toEqual("application/vnd.3gpp.pic-bw-var");
    expect(mime.type("tcap")).toEqual("application/vnd.3gpp2.tcap");
    expect(mime.type("pwn")).toEqual("application/vnd.3m.post-it-notes");
    expect(mime.type("aso")).toEqual("application/vnd.accpac.simply.aso");
    expect(mime.type("imp")).toEqual("application/vnd.accpac.simply.imp");
    expect(mime.type("acu")).toEqual("application/vnd.acucobol");
    expect(mime.type("acutc")).toEqual("application/vnd.acucorp");
    expect(mime.type("atc")).toEqual("application/vnd.acucorp");
    expect(mime.type("air")).toEqual("application/vnd.adobe.air-application-installer-package+zip");
    expect(mime.type("xdp")).toEqual("application/vnd.adobe.xdp+xml");
    expect(mime.type("xfdf")).toEqual("application/vnd.adobe.xfdf");
    expect(mime.type("azf")).toEqual("application/vnd.airzip.filesecure.azf");
    expect(mime.type("azs")).toEqual("application/vnd.airzip.filesecure.azs");
    expect(mime.type("azw")).toEqual("application/vnd.amazon.ebook");
    expect(mime.type("acc")).toEqual("application/vnd.americandynamics.acc");
    expect(mime.type("ami")).toEqual("application/vnd.amiga.ami");
    expect(mime.type("apk")).toEqual("application/vnd.android.package-archive");
    expect(mime.type("cii")).toEqual("application/vnd.anser-web-certificate-issue-initiation");
    expect(mime.type("fti")).toEqual("application/vnd.anser-web-funds-transfer-initiation");
    expect(mime.type("atx")).toEqual("application/vnd.antix.game-component");
    expect(mime.type("mpkg")).toEqual("application/vnd.apple.installer+xml");
    expect(mime.type("swi")).toEqual("application/vnd.arastra.swi");
    expect(mime.type("aep")).toEqual("application/vnd.audiograph");
    expect(mime.type("mpm")).toEqual("application/vnd.blueice.multipass");
    expect(mime.type("bmi")).toEqual("application/vnd.bmi");
    expect(mime.type("rep")).toEqual("application/vnd.businessobjects");
    expect(mime.type("cdxml")).toEqual("application/vnd.chemdraw+xml");
    expect(mime.type("mmd")).toEqual("application/vnd.chipnuts.karaoke-mmd");
    expect(mime.type("cdy")).toEqual("application/vnd.cinderella");
    expect(mime.type("cla")).toEqual("application/vnd.claymore");
    expect(mime.type("c4d")).toEqual("application/vnd.clonk.c4group");
    expect(mime.type("c4f")).toEqual("application/vnd.clonk.c4group");
    expect(mime.type("c4g")).toEqual("application/vnd.clonk.c4group");
    expect(mime.type("c4p")).toEqual("application/vnd.clonk.c4group");
    expect(mime.type("c4u")).toEqual("application/vnd.clonk.c4group");
    expect(mime.type("csp")).toEqual("application/vnd.commonspace");
    expect(mime.type("cdbcmsg")).toEqual("application/vnd.contact.cmsg");
    expect(mime.type("cmc")).toEqual("application/vnd.cosmocaller");
    expect(mime.type("clkx")).toEqual("application/vnd.crick.clicker");
    expect(mime.type("clkk")).toEqual("application/vnd.crick.clicker.keyboard");
    expect(mime.type("clkp")).toEqual("application/vnd.crick.clicker.palette");
    expect(mime.type("clkt")).toEqual("application/vnd.crick.clicker.template");
    expect(mime.type("clkw")).toEqual("application/vnd.crick.clicker.wordbank");
    expect(mime.type("wbs")).toEqual("application/vnd.criticaltools.wbs+xml");
    expect(mime.type("pml")).toEqual("application/vnd.ctc-posml");
    expect(mime.type("ppd")).toEqual("application/vnd.cups-ppd");
    expect(mime.type("car")).toEqual("application/vnd.curl.car");
    expect(mime.type("pcurl")).toEqual("application/vnd.curl.pcurl");
    expect(mime.type("rdz")).toEqual("application/vnd.data-vision.rdz");
    expect(mime.type("deb")).toEqual("application/x-debian-package");
    expect(mime.type("udeb")).toEqual("application/x-debian-package");
    expect(mime.type("fe_launch")).toEqual("application/vnd.denovo.fcselayout-link");
    expect(mime.type("dna")).toEqual("application/vnd.dna");
    expect(mime.type("mlp")).toEqual("application/vnd.dolby.mlp");
    expect(mime.type("dpg")).toEqual("application/vnd.dpgraph");
    expect(mime.type("dfac")).toEqual("application/vnd.dreamfactory");
    expect(mime.type("geo")).toEqual("application/vnd.dynageo");
    expect(mime.type("mag")).toEqual("application/vnd.ecowin.chart");
    expect(mime.type("nml")).toEqual("application/vnd.enliven");
    expect(mime.type("esf")).toEqual("application/vnd.epson.esf");
    expect(mime.type("msf")).toEqual("application/vnd.epson.msf");
    expect(mime.type("qam")).toEqual("application/vnd.epson.quickanime");
    expect(mime.type("slt")).toEqual("application/vnd.epson.salt");
    expect(mime.type("ssf")).toEqual("application/vnd.epson.ssf");
    expect(mime.type("es3")).toEqual("application/vnd.eszigno3+xml");
    expect(mime.type("et3")).toEqual("application/vnd.eszigno3+xml");
    expect(mime.type("ez2")).toEqual("application/vnd.ezpix-album");
    expect(mime.type("ez3")).toEqual("application/vnd.ezpix-package");
    expect(mime.type("fdf")).toEqual("application/vnd.fdf");
    expect(mime.type("mseed")).toEqual("application/vnd.fdsn.mseed");
    expect(mime.type("dataless")).toEqual("application/vnd.fdsn.seed");
    expect(mime.type("seed")).toEqual("application/vnd.fdsn.seed");
    expect(mime.type("gph")).toEqual("application/vnd.flographit");
    expect(mime.type("ftc")).toEqual("application/vnd.fluxtime.clip");
    expect(mime.type("book")).toEqual("application/vnd.framemaker");
    expect(mime.type("fm")).toEqual("application/vnd.framemaker");
    expect(mime.type("frame")).toEqual("application/vnd.framemaker");
    expect(mime.type("maker")).toEqual("application/vnd.framemaker");
    expect(mime.type("fnc")).toEqual("application/vnd.frogans.fnc");
    expect(mime.type("ltf")).toEqual("application/vnd.frogans.ltf");
    expect(mime.type("fsc")).toEqual("application/vnd.fsc.weblaunch");
    expect(mime.type("oas")).toEqual("application/vnd.fujitsu.oasys");
    expect(mime.type("oa2")).toEqual("application/vnd.fujitsu.oasys2");
    expect(mime.type("oa3")).toEqual("application/vnd.fujitsu.oasys3");
    expect(mime.type("fg5")).toEqual("application/vnd.fujitsu.oasysgp");
    expect(mime.type("bh2")).toEqual("application/vnd.fujitsu.oasysprs");
    expect(mime.type("ddd")).toEqual("application/vnd.fujixerox.ddd");
    expect(mime.type("xdw")).toEqual("application/vnd.fujixerox.docuworks");
    expect(mime.type("xbd")).toEqual("application/vnd.fujixerox.docuworks.binder");
    expect(mime.type("fzs")).toEqual("application/vnd.fuzzysheet");
    expect(mime.type("txd")).toEqual("application/vnd.genomatix.tuxedo");
    expect(mime.type("ggb")).toEqual("application/vnd.geogebra.file");
    expect(mime.type("ggt")).toEqual("application/vnd.geogebra.tool");
    expect(mime.type("gex")).toEqual("application/vnd.geometry-explorer");
    expect(mime.type("gre")).toEqual("application/vnd.geometry-explorer");
    expect(mime.type("gbr")).toEqual("application/vnd.gerber");
    expect(mime.type("gmx")).toEqual("application/vnd.gmx");
    expect(mime.type("kml")).toEqual("application/vnd.google-earth.kml+xml");
    expect(mime.type("kmz")).toEqual("application/vnd.google-earth.kmz");
    expect(mime.type("gqf")).toEqual("application/vnd.grafeq");
    expect(mime.type("gqs")).toEqual("application/vnd.grafeq");
    expect(mime.type("gac")).toEqual("application/vnd.groove-account");
    expect(mime.type("ghf")).toEqual("application/vnd.groove-help");
    expect(mime.type("gim")).toEqual("application/vnd.groove-identity-message");
    expect(mime.type("grv")).toEqual("application/vnd.groove-injector");
    expect(mime.type("gtm")).toEqual("application/vnd.groove-tool-message");
    expect(mime.type("tpl")).toEqual("application/vnd.groove-tool-template");
    expect(mime.type("vcg")).toEqual("application/vnd.groove-vcard");
    expect(mime.type("zmm")).toEqual("application/vnd.handheld-entertainment+xml");
    expect(mime.type("hbci")).toEqual("application/vnd.hbci");
    expect(mime.type("les")).toEqual("application/vnd.hhe.lesson-player");
    expect(mime.type("hpgl")).toEqual("application/vnd.hp-hpgl");
    expect(mime.type("hpid")).toEqual("application/vnd.hp-hpid");
    expect(mime.type("hps")).toEqual("application/vnd.hp-hps");
    expect(mime.type("jlt")).toEqual("application/vnd.hp-jlyt");
    expect(mime.type("pcl")).toEqual("application/vnd.hp-pcl");
    expect(mime.type("pclxl")).toEqual("application/vnd.hp-pclxl");
    expect(mime.type("sfd-hdstx")).toEqual("application/vnd.hydrostatix.sof-data");
    expect(mime.type("x3d")).toEqual("application/vnd.hzn-3d-crossword");
    expect(mime.type("mpy")).toEqual("application/vnd.ibm.minipay");
    expect(mime.type("afp")).toEqual("application/vnd.ibm.modcap");
    expect(mime.type("list3820")).toEqual("application/vnd.ibm.modcap");
    expect(mime.type("listafp")).toEqual("application/vnd.ibm.modcap");
    expect(mime.type("irm")).toEqual("application/vnd.ibm.rights-management");
    expect(mime.type("sc")).toEqual("application/vnd.ibm.secure-container");
    expect(mime.type("icc")).toEqual("application/vnd.iccprofile");
    expect(mime.type("icm")).toEqual("application/vnd.iccprofile");
    expect(mime.type("igl")).toEqual("application/vnd.igloader");
    expect(mime.type("ivp")).toEqual("application/vnd.immervision-ivp");
    expect(mime.type("ivu")).toEqual("application/vnd.immervision-ivu");
    expect(mime.type("xpw")).toEqual("application/vnd.intercon.formnet");
    expect(mime.type("xpx")).toEqual("application/vnd.intercon.formnet");
    expect(mime.type("qbo")).toEqual("application/vnd.intu.qbo");
    expect(mime.type("qfx")).toEqual("application/vnd.intu.qfx");
    expect(mime.type("rcprofile")).toEqual("application/vnd.ipunplugged.rcprofile");
    expect(mime.type("irp")).toEqual("application/vnd.irepository.package+xml");
    expect(mime.type("xpr")).toEqual("application/vnd.is-xpr");
    expect(mime.type("jam")).toEqual("application/vnd.jam");
    expect(mime.type("rms")).toEqual("application/vnd.jcp.javame.midlet-rms");
    expect(mime.type("jisp")).toEqual("application/vnd.jisp");
    expect(mime.type("joda")).toEqual("application/vnd.joost.joda-archive");
    expect(mime.type("ktr")).toEqual("application/vnd.kahootz");
    expect(mime.type("ktz")).toEqual("application/vnd.kahootz");
    expect(mime.type("karbon")).toEqual("application/vnd.kde.karbon");
    expect(mime.type("chrt")).toEqual("application/vnd.kde.kchart");
    expect(mime.type("kfo")).toEqual("application/vnd.kde.kformula");
    expect(mime.type("flw")).toEqual("application/vnd.kde.kivio");
    expect(mime.type("kon")).toEqual("application/vnd.kde.kontour");
    expect(mime.type("kpr")).toEqual("application/vnd.kde.kpresenter");
    expect(mime.type("kpt")).toEqual("application/vnd.kde.kpresenter");
    expect(mime.type("ksp")).toEqual("application/vnd.kde.kspread");
    expect(mime.type("kwd")).toEqual("application/vnd.kde.kword");
    expect(mime.type("kwt")).toEqual("application/vnd.kde.kword");
    expect(mime.type("htke")).toEqual("application/vnd.kenameaapp");
    expect(mime.type("kia")).toEqual("application/vnd.kidspiration");
    expect(mime.type("kne")).toEqual("application/vnd.kinar");
    expect(mime.type("knp")).toEqual("application/vnd.kinar");
    expect(mime.type("skd")).toEqual("application/vnd.koan");
    expect(mime.type("skm")).toEqual("application/vnd.koan");
    expect(mime.type("skp")).toEqual("application/vnd.koan");
    expect(mime.type("skt")).toEqual("application/vnd.koan");
    expect(mime.type("sse")).toEqual("application/vnd.kodak-descriptor");
    expect(mime.type("lbd")).toEqual("application/vnd.llamagraphics.life-balance.desktop");
    expect(mime.type("lbe")).toEqual("application/vnd.llamagraphics.life-balance.exchange+xml");
    expect(mime.type("apr")).toEqual("application/vnd.lotus-approach");
    expect(mime.type("pre")).toEqual("application/vnd.lotus-freelance");
    expect(mime.type("nsf")).toEqual("application/vnd.lotus-notes");
    expect(mime.type("org")).toEqual("application/vnd.lotus-organizer");
    expect(mime.type("scm")).toEqual("application/vnd.lotus-screencam");
    expect(mime.type("lwp")).toEqual("application/vnd.lotus-wordpro");
    expect(mime.type("portpkg")).toEqual("application/vnd.macports.portpkg");
    expect(mime.type("mcd")).toEqual("application/vnd.mcd");
    expect(mime.type("mc1")).toEqual("application/vnd.medcalcdata");
    expect(mime.type("cdkey")).toEqual("application/vnd.mediastation.cdkey");
    expect(mime.type("mwf")).toEqual("application/vnd.mfer");
    expect(mime.type("mfm")).toEqual("application/vnd.mfmp");
    expect(mime.type("flo")).toEqual("application/vnd.micrografx.flo");
    expect(mime.type("igx")).toEqual("application/vnd.micrografx.igx");
    expect(mime.type("mif")).toEqual("application/vnd.mif");
    expect(mime.type("daf")).toEqual("application/vnd.mobius.daf");
    expect(mime.type("dis")).toEqual("application/vnd.mobius.dis");
    expect(mime.type("mbk")).toEqual("application/vnd.mobius.mbk");
    expect(mime.type("mqy")).toEqual("application/vnd.mobius.mqy");
    expect(mime.type("msl")).toEqual("application/vnd.mobius.msl");
    expect(mime.type("plc")).toEqual("application/vnd.mobius.plc");
    expect(mime.type("txf")).toEqual("application/vnd.mobius.txf");
    expect(mime.type("mpn")).toEqual("application/vnd.mophun.application");
    expect(mime.type("mpc")).toEqual("application/vnd.mophun.certificate");
    expect(mime.type("xul")).toEqual("application/vnd.mozilla.xul+xml");
    expect(mime.type("cil")).toEqual("application/vnd.ms-artgalry");
    expect(mime.type("cab")).toEqual("application/vnd.ms-cab-compressed");
    expect(mime.type("xla")).toEqual("application/vnd.ms-excel");
    expect(mime.type("xlb")).toEqual("application/vnd.ms-excel");
    expect(mime.type("xlc")).toEqual("application/vnd.ms-excel");
    expect(mime.type("xlm")).toEqual("application/vnd.ms-excel");
    expect(mime.type("xls")).toEqual("application/vnd.ms-excel");
    expect(mime.type("xlt")).toEqual("application/vnd.ms-excel");
    expect(mime.type("xlw")).toEqual("application/vnd.ms-excel");
    expect(mime.type("xlam")).toEqual("application/vnd.ms-excel.addin.macroenabled.12");
    expect(mime.type("xlsb")).toEqual("application/vnd.ms-excel.sheet.binary.macroenabled.12");
    expect(mime.type("xlsm")).toEqual("application/vnd.ms-excel.sheet.macroenabled.12");
    expect(mime.type("xltm")).toEqual("application/vnd.ms-excel.template.macroenabled.12");
    expect(mime.type("eot")).toEqual("application/vnd.ms-fontobject");
    expect(mime.type("chm")).toEqual("application/vnd.ms-htmlhelp");
    expect(mime.type("ims")).toEqual("application/vnd.ms-ims");
    expect(mime.type("lrm")).toEqual("application/vnd.ms-lrm");
    expect(mime.type("cat")).toEqual("application/vnd.ms-pki.seccat");
    expect(mime.type("stl")).toEqual("application/vnd.ms-pki.stl");
    expect(mime.type("pot")).toEqual("application/vnd.ms-powerpoint");
    expect(mime.type("ppa")).toEqual("application/vnd.ms-powerpoint");
    expect(mime.type("pps")).toEqual("application/vnd.ms-powerpoint");
    expect(mime.type("ppt")).toEqual("application/vnd.ms-powerpoint");
    expect(mime.type("pwz")).toEqual("application/vnd.ms-powerpoint");
    expect(mime.type("ppam")).toEqual("application/vnd.ms-powerpoint.addin.macroenabled.12");
    expect(mime.type("pptm")).toEqual("application/vnd.ms-powerpoint.presentation.macroenabled.12");
    expect(mime.type("sldm")).toEqual("application/vnd.ms-powerpoint.slide.macroenabled.12");
    expect(mime.type("ppsm")).toEqual("application/vnd.ms-powerpoint.slideshow.macroenabled.12");
    expect(mime.type("potm")).toEqual("application/vnd.ms-powerpoint.template.macroenabled.12");
    expect(mime.type("mpp")).toEqual("application/vnd.ms-project");
    expect(mime.type("mpt")).toEqual("application/vnd.ms-project");
    expect(mime.type("docm")).toEqual("application/vnd.ms-word.document.macroenabled.12");
    expect(mime.type("dotm")).toEqual("application/vnd.ms-word.template.macroenabled.12");
    expect(mime.type("wcm")).toEqual("application/vnd.ms-works");
    expect(mime.type("wdb")).toEqual("application/vnd.ms-works");
    expect(mime.type("wks")).toEqual("application/vnd.ms-works");
    expect(mime.type("wps")).toEqual("application/vnd.ms-works");
    expect(mime.type("wpl")).toEqual("application/vnd.ms-wpl");
    expect(mime.type("xps")).toEqual("application/vnd.ms-xpsdocument");
    expect(mime.type("mseq")).toEqual("application/vnd.mseq");
    expect(mime.type("mus")).toEqual("application/vnd.musician");
    expect(mime.type("msty")).toEqual("application/vnd.muvee.style");
    expect(mime.type("nlu")).toEqual("application/vnd.neurolanguage.nlu");
    expect(mime.type("nnd")).toEqual("application/vnd.noblenet-directory");
    expect(mime.type("nns")).toEqual("application/vnd.noblenet-sealer");
    expect(mime.type("nnw")).toEqual("application/vnd.noblenet-web");
    expect(mime.type("ngdat")).toEqual("application/vnd.nokia.n-gage.data");
    expect(mime.type("n-gage")).toEqual("application/vnd.nokia.n-gage.symbian.install");
    expect(mime.type("rpst")).toEqual("application/vnd.nokia.radio-preset");
    expect(mime.type("rpss")).toEqual("application/vnd.nokia.radio-presets");
    expect(mime.type("edm")).toEqual("application/vnd.novadigm.edm");
    expect(mime.type("edx")).toEqual("application/vnd.novadigm.edx");
    expect(mime.type("ext")).toEqual("application/vnd.novadigm.ext");
    expect(mime.type("odc")).toEqual("application/vnd.oasis.opendocument.chart");
    expect(mime.type("otc")).toEqual("application/vnd.oasis.opendocument.chart-template");
    expect(mime.type("odb")).toEqual("application/vnd.oasis.opendocument.database");
    expect(mime.type("odf")).toEqual("application/vnd.oasis.opendocument.formula");
    expect(mime.type("odft")).toEqual("application/vnd.oasis.opendocument.formula-template");
    expect(mime.type("odg")).toEqual("application/vnd.oasis.opendocument.graphics");
    expect(mime.type("otg")).toEqual("application/vnd.oasis.opendocument.graphics-template");
    expect(mime.type("odi")).toEqual("application/vnd.oasis.opendocument.image");
    expect(mime.type("oti")).toEqual("application/vnd.oasis.opendocument.image-template");
    expect(mime.type("odp")).toEqual("application/vnd.oasis.opendocument.presentation");
    expect(mime.type("otp")).toEqual("application/vnd.oasis.opendocument.presentation-template");
    expect(mime.type("ods")).toEqual("application/vnd.oasis.opendocument.spreadsheet");
    expect(mime.type("ots")).toEqual("application/vnd.oasis.opendocument.spreadsheet-template");
    expect(mime.type("odt")).toEqual("application/vnd.oasis.opendocument.text");
    expect(mime.type("otm")).toEqual("application/vnd.oasis.opendocument.text-master");
    expect(mime.type("ott")).toEqual("application/vnd.oasis.opendocument.text-template");
    expect(mime.type("oth")).toEqual("application/vnd.oasis.opendocument.text-web");
    expect(mime.type("xo")).toEqual("application/vnd.olpc-sugar");
    expect(mime.type("dd2")).toEqual("application/vnd.oma.dd2+xml");
    expect(mime.type("oxt")).toEqual("application/vnd.openofficeorg.extension");
    expect(mime.type("pptx")).toEqual("application/vnd.openxmlformats-officedocument.presentationml.presentation");
    expect(mime.type("sldx")).toEqual("application/vnd.openxmlformats-officedocument.presentationml.slide");
    expect(mime.type("ppsx")).toEqual("application/vnd.openxmlformats-officedocument.presentationml.slideshow");
    expect(mime.type("potx")).toEqual("application/vnd.openxmlformats-officedocument.presentationml.template");
    expect(mime.type("xlsx")).toEqual("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    expect(mime.type("xltx")).toEqual("application/vnd.openxmlformats-officedocument.spreadsheetml.template");
    expect(mime.type("docx")).toEqual("application/vnd.openxmlformats-officedocument.wordprocessingml.document");
    expect(mime.type("dotx")).toEqual("application/vnd.openxmlformats-officedocument.wordprocessingml.template");
    expect(mime.type("dp")).toEqual("application/vnd.osgi.dp");
    expect(mime.type("oprc")).toEqual("application/vnd.palm");
    expect(mime.type("pdb")).toEqual("application/vnd.palm");
    expect(mime.type("pqa")).toEqual("application/vnd.palm");
    expect(mime.type("str")).toEqual("application/vnd.pg.format");
    expect(mime.type("ei6")).toEqual("application/vnd.pg.osasli");
    expect(mime.type("efif")).toEqual("application/vnd.picsel");
    expect(mime.type("plf")).toEqual("application/vnd.pocketlearn");
    expect(mime.type("pbd")).toEqual("application/vnd.powerbuilder6");
    expect(mime.type("box")).toEqual("application/vnd.previewsystems.box");
    expect(mime.type("mgz")).toEqual("application/vnd.proteus.magazine");
    expect(mime.type("qps")).toEqual("application/vnd.publishare-delta-tree");
    expect(mime.type("ptid")).toEqual("application/vnd.pvi.ptid1");
    expect(mime.type("qwd")).toEqual("application/vnd.quark.quarkxpress");
    expect(mime.type("qwt")).toEqual("application/vnd.quark.quarkxpress");
    expect(mime.type("qxb")).toEqual("application/vnd.quark.quarkxpress");
    expect(mime.type("qxd")).toEqual("application/vnd.quark.quarkxpress");
    expect(mime.type("qxl")).toEqual("application/vnd.quark.quarkxpress");
    expect(mime.type("qxt")).toEqual("application/vnd.quark.quarkxpress");
    expect(mime.type("rar")).toEqual("application/x-rar-compressed");
    expect(mime.type("mxl")).toEqual("application/vnd.recordare.musicxml");
    expect(mime.type("musicxml")).toEqual("application/vnd.recordare.musicxml+xml");
    expect(mime.type("cod")).toEqual("application/vnd.rim.cod");
    expect(mime.type("rm")).toEqual("application/vnd.rn-realmedia");
    expect(mime.type("link66")).toEqual("application/vnd.route66.link66+xml");
    expect(mime.type("see")).toEqual("application/vnd.seemail");
    expect(mime.type("sema")).toEqual("application/vnd.sema");
    expect(mime.type("semd")).toEqual("application/vnd.semd");
    expect(mime.type("semf")).toEqual("application/vnd.semf");
    expect(mime.type("ifm")).toEqual("application/vnd.shana.informed.formdata");
    expect(mime.type("itp")).toEqual("application/vnd.shana.informed.formtemplate");
    expect(mime.type("iif")).toEqual("application/vnd.shana.informed.interchange");
    expect(mime.type("ipk")).toEqual("application/vnd.shana.informed.package");
    expect(mime.type("twd")).toEqual("application/vnd.simtech-mindmapper");
    expect(mime.type("twds")).toEqual("application/vnd.simtech-mindmapper");
    expect(mime.type("mmf")).toEqual("application/vnd.smaf");
    expect(mime.type("teacher")).toEqual("application/vnd.smart.teacher");
    expect(mime.type("sdkd")).toEqual("application/vnd.solent.sdkm+xml");
    expect(mime.type("sdkm")).toEqual("application/vnd.solent.sdkm+xml");
    expect(mime.type("dxp")).toEqual("application/vnd.spotfire.dxp");
    expect(mime.type("sfs")).toEqual("application/vnd.spotfire.sfs");
    expect(mime.type("db")).toEqual("application/x-sqlite3");
    expect(mime.type("sqlite")).toEqual("application/x-sqlite3");
    expect(mime.type("sqlite3")).toEqual("application/x-sqlite3");
    expect(mime.type("db-wal")).toEqual("application/x-sqlite3");
    expect(mime.type("sqlite-wal")).toEqual("application/x-sqlite3");
    expect(mime.type("db-shm")).toEqual("application/x-sqlite3");
    expect(mime.type("sqlite-shm")).toEqual("application/x-sqlite3");
    expect(mime.type("sdc")).toEqual("application/vnd.stardivision.calc");
    expect(mime.type("sda")).toEqual("application/vnd.stardivision.draw");
    expect(mime.type("sdd")).toEqual("application/vnd.stardivision.impress");
    expect(mime.type("smf")).toEqual("application/vnd.stardivision.math");
    expect(mime.type("sdw")).toEqual("application/vnd.stardivision.writer");
    expect(mime.type("vor")).toEqual("application/vnd.stardivision.writer");
    expect(mime.type("sgl")).toEqual("application/vnd.stardivision.writer-global");
    expect(mime.type("sxc")).toEqual("application/vnd.sun.xml.calc");
    expect(mime.type("stc")).toEqual("application/vnd.sun.xml.calc.template");
    expect(mime.type("sxd")).toEqual("application/vnd.sun.xml.draw");
    expect(mime.type("std")).toEqual("application/vnd.sun.xml.draw.template");
    expect(mime.type("sxi")).toEqual("application/vnd.sun.xml.impress");
    expect(mime.type("sti")).toEqual("application/vnd.sun.xml.impress.template");
    expect(mime.type("sxm")).toEqual("application/vnd.sun.xml.math");
    expect(mime.type("sxw")).toEqual("application/vnd.sun.xml.writer");
    expect(mime.type("sxg")).toEqual("application/vnd.sun.xml.writer.global");
    expect(mime.type("stw")).toEqual("application/vnd.sun.xml.writer.template");
    expect(mime.type("sus")).toEqual("application/vnd.sus-calendar");
    expect(mime.type("susp")).toEqual("application/vnd.sus-calendar");
    expect(mime.type("svd")).toEqual("application/vnd.svd");
    expect(mime.type("sis")).toEqual("application/vnd.symbian.install");
    expect(mime.type("sisx")).toEqual("application/vnd.symbian.install");
    expect(mime.type("xsm")).toEqual("application/vnd.syncml+xml");
    expect(mime.type("bdm")).toEqual("application/vnd.syncml.dm+wbxml");
    expect(mime.type("xdm")).toEqual("application/vnd.syncml.dm+xml");
    expect(mime.type("tao")).toEqual("application/vnd.tao.intent-module-archive");
    expect(mime.type("tmo")).toEqual("application/vnd.tmobile-livetv");
    expect(mime.type("tpt")).toEqual("application/vnd.trid.tpt");
    expect(mime.type("mxs")).toEqual("application/vnd.triscape.mxs");
    expect(mime.type("tra")).toEqual("application/vnd.trueapp");
    expect(mime.type("ufd")).toEqual("application/vnd.ufdl");
    expect(mime.type("ufdl")).toEqual("application/vnd.ufdl");
    expect(mime.type("utz")).toEqual("application/vnd.uiq.theme");
    expect(mime.type("umj")).toEqual("application/vnd.umajin");
    expect(mime.type("unityweb")).toEqual("application/vnd.unity");
    expect(mime.type("uoml")).toEqual("application/vnd.uoml+xml");
    expect(mime.type("vcx")).toEqual("application/vnd.vcx");
    expect(mime.type("vsd")).toEqual("application/vnd.visio");
    expect(mime.type("vss")).toEqual("application/vnd.visio");
    expect(mime.type("vst")).toEqual("application/vnd.visio");
    expect(mime.type("vsw")).toEqual("application/vnd.visio");
    expect(mime.type("vsdx")).toEqual("application/vnd.visio");
    expect(mime.type("vssx")).toEqual("application/vnd.visio");
    expect(mime.type("vstx")).toEqual("application/vnd.visio");
    expect(mime.type("vssm")).toEqual("application/vnd.visio");
    expect(mime.type("vstm")).toEqual("application/vnd.visio");
    expect(mime.type("vis")).toEqual("application/vnd.visionary");
    expect(mime.type("vsf")).toEqual("application/vnd.vsf");
    expect(mime.type("sic")).toEqual("application/vnd.wap.sic");
    expect(mime.type("slc")).toEqual("application/vnd.wap.slc");
    expect(mime.type("wbxml")).toEqual("application/vnd.wap.wbxml");
    expect(mime.type("wmlc")).toEqual("application/vnd.wap.wmlc");
    expect(mime.type("wmlsc")).toEqual("application/vnd.wap.wmlscriptc");
    expect(mime.type("wtb")).toEqual("application/vnd.webturbo");
    expect(mime.type("wpd")).toEqual("application/vnd.wordperfect");
    expect(mime.type("wqd")).toEqual("application/vnd.wqd");
    expect(mime.type("stf")).toEqual("application/vnd.wt.stf");
    expect(mime.type("xar")).toEqual("application/vnd.xara");
    expect(mime.type("xfdl")).toEqual("application/vnd.xfdl");
    expect(mime.type("hvd")).toEqual("application/vnd.yamaha.hv-dic");
    expect(mime.type("hvs")).toEqual("application/vnd.yamaha.hv-script");
    expect(mime.type("hvp")).toEqual("application/vnd.yamaha.hv-voice");
    expect(mime.type("osf")).toEqual("application/vnd.yamaha.openscoreformat");
    expect(mime.type("osfpvg")).toEqual("application/vnd.yamaha.openscoreformat.osfpvg+xml");
    expect(mime.type("saf")).toEqual("application/vnd.yamaha.smaf-audio");
    expect(mime.type("spf")).toEqual("application/vnd.yamaha.smaf-phrase");
    expect(mime.type("cmp")).toEqual("application/vnd.yellowriver-custom-menu");
    expect(mime.type("zir")).toEqual("application/vnd.zul");
    expect(mime.type("zirz")).toEqual("application/vnd.zul");
    expect(mime.type("zaz")).toEqual("application/vnd.zzazz.deck+xml");
    expect(mime.type("vxml")).toEqual("application/voicexml+xml");
    expect(mime.type("wasm")).toEqual("application/wasm");
    expect(mime.type("hlp")).toEqual("application/winhlp");
    expect(mime.type("wsdl")).toEqual("application/wsdl+xml");
    expect(mime.type("wspolicy")).toEqual("application/wspolicy+xml");
    expect(mime.type("7z")).toEqual("application/x-7z-compressed");
    expect(mime.type("abw")).toEqual("application/x-abiword");
    expect(mime.type("zabw")).toEqual("application/x-abiword");
    expect(mime.type("abw.gz")).toEqual("application/x-abiword");
    expect(mime.type("ace")).toEqual("application/x-ace-compressed");
    expect(mime.type("aab")).toEqual("application/x-authorware-bin");
    expect(mime.type("u32")).toEqual("application/x-authorware-bin");
    expect(mime.type("vox")).toEqual("application/x-authorware-bin");
    expect(mime.type("x32")).toEqual("application/x-authorware-bin");
    expect(mime.type("aam")).toEqual("application/x-authorware-map");
    expect(mime.type("aas")).toEqual("application/x-authorware-seg");
    expect(mime.type("bcpio")).toEqual("application/x-bcpio");
    expect(mime.type("torrent")).toEqual("application/x-bittorrent");
    expect(mime.type("bz")).toEqual("application/x-bzip");
    expect(mime.type("boz")).toEqual("application/x-bzip2");
    expect(mime.type("bz2")).toEqual("application/x-bzip2");
    expect(mime.type("vcd")).toEqual("application/x-cdlink");
    expect(mime.type("chat")).toEqual("application/x-chat");
    expect(mime.type("pgn")).toEqual("application/x-chess-pgn");
    expect(mime.type("cpio")).toEqual("application/x-cpio");
    expect(mime.type("csh")).toEqual("application/x-csh");
    expect(mime.type("cct")).toEqual("application/x-director");
    expect(mime.type("cst")).toEqual("application/x-director");
    expect(mime.type("cxt")).toEqual("application/x-director");
    expect(mime.type("dcr")).toEqual("image/x-kodak-dcr");
    expect(mime.type("dir")).toEqual("application/x-director");
    expect(mime.type("dxr")).toEqual("application/x-director");
    expect(mime.type("fgd")).toEqual("application/x-director");
    expect(mime.type("swa")).toEqual("application/x-director");
    expect(mime.type("w3d")).toEqual("application/x-director");
    expect(mime.type("wad")).toEqual("application/x-doom");
    expect(mime.type("ncx")).toEqual("application/x-dtbncx+xml");
    expect(mime.type("dtb")).toEqual("application/x-dtbook+xml");
    expect(mime.type("res")).toEqual("application/x-dtbresource+xml");
    expect(mime.type("dvi")).toEqual("application/x-dvi");
    expect(mime.type("bdf")).toEqual("application/x-font-bdf");
    expect(mime.type("gsf")).toEqual("application/x-font-ghostscript");
    expect(mime.type("psf")).toEqual("application/x-font-linux-psf");
    expect(mime.type("otf")).toEqual("font/otf");
    expect(mime.type("pcf")).toEqual("application/x-font-pcf");
    expect(mime.type("snf")).toEqual("application/x-font-snf");
    expect(mime.type("ttc")).toEqual("application/x-font-ttf");
    expect(mime.type("ttf")).toEqual("application/x-font-ttf");
    expect(mime.type("afm")).toEqual("application/x-font-type1");
    expect(mime.type("pfa")).toEqual("application/x-font-type1");
    expect(mime.type("pfb")).toEqual("application/x-font-type1");
    expect(mime.type("pfm")).toEqual("application/x-font-type1");
    expect(mime.type("spl")).toEqual("application/x-futuresplash");
    expect(mime.type("gnumeric")).toEqual("application/x-gnumeric");
    expect(mime.type("gtar")).toEqual("application/x-gtar");
    expect(mime.type("hdf")).toEqual("application/x-hdf");
    expect(mime.type("iso")).toEqual("application/x-iso9660-image");
    expect(mime.type("isoimg")).toEqual("application/x-iso9660-image");
    expect(mime.type("cdr")).toEqual("application/x-iso9660-image");
    expect(mime.type("jnlp")).toEqual("application/x-java-jnlp-file");
    expect(mime.type("kil")).toEqual("application/x-killustrator");
    expect(mime.type("kra")).toEqual("application/x-krita");
    expect(mime.type("krz")).toEqual("application/x-krita");
    expect(mime.type("latex")).toEqual("application/x-latex");
    expect(mime.type("mobi")).toEqual("application/x-mobipocket-ebook");
    expect(mime.type("prc")).toEqual("application/x-mobipocket-ebook");
    expect(mime.type("application")).toEqual("application/x-ms-application");
    expect(mime.type("wmd")).toEqual("application/x-ms-wmd");
    expect(mime.type("wmz")).toEqual("application/x-ms-wmz");
    expect(mime.type("xbap")).toEqual("application/x-ms-xbap");
    expect(mime.type("mdb")).toEqual("application/x-msaccess");
    expect(mime.type("obd")).toEqual("application/x-msbinder");
    expect(mime.type("crd")).toEqual("application/x-mscardfile");
    expect(mime.type("clp")).toEqual("application/x-msclip");
    expect(mime.type("bat")).toEqual("application/x-msdownload");
    expect(mime.type("com")).toEqual("application/x-msdownload");
    expect(mime.type("dll")).toEqual("application/x-msdownload");
    expect(mime.type("exe")).toEqual("application/x-msdownload");
    expect(mime.type("msi")).toEqual("application/x-msdownload");
    expect(mime.type("m13")).toEqual("application/x-msmediaview");
    expect(mime.type("m14")).toEqual("application/x-msmediaview");
    expect(mime.type("mvb")).toEqual("application/x-msmediaview");
    expect(mime.type("wmf")).toEqual("application/x-msmetafile");
    expect(mime.type("mny")).toEqual("application/x-msmoney");
    expect(mime.type("pub")).toEqual("application/x-mspublisher");
    expect(mime.type("scd")).toEqual("application/x-msschedule");
    expect(mime.type("trm")).toEqual("application/x-msterminal");
    expect(mime.type("wri")).toEqual("application/x-mswrite");
    expect(mime.type("cdf")).toEqual("application/x-netcdf");
    expect(mime.type("nc")).toEqual("application/x-netcdf");
    expect(mime.type("pm")).toEqual("application/x-perl");
    expect(mime.type("pl")).toEqual("text/plain");
    expect(mime.type("p12")).toEqual("application/x-pkcs12");
    expect(mime.type("pfx")).toEqual("application/x-pkcs12");
    expect(mime.type("p7b")).toEqual("application/x-pkcs7-certificates");
    expect(mime.type("spc")).toEqual("application/x-pkcs7-certificates");
    expect(mime.type("p7r")).toEqual("application/x-pkcs7-certreqresp");
    expect(mime.type("pyc")).toEqual("application/x-python-code");
    expect(mime.type("pyo")).toEqual("application/x-python-code");
    expect(mime.type("rpa")).toEqual("application/x-redhat-package-manager");
    expect(mime.type("rpm")).toEqual("application/x-rpm");
    expect(mime.type("sh")).toEqual("application/x-shellscript");
    expect(mime.type("shar")).toEqual("application/x-shar");
    expect(mime.type("swf")).toEqual("application/x-shockwave-flash");
    expect(mime.type("xap")).toEqual("application/x-silverlight-app");
    expect(mime.type("sit")).toEqual("application/x-stuffit");
    expect(mime.type("sitx")).toEqual("application/x-stuffitx");
    expect(mime.type("sv4cpio")).toEqual("application/x-sv4cpio");
    expect(mime.type("sv4crc")).toEqual("application/x-sv4crc");
    expect(mime.type("tar")).toEqual("application/x-tar");
    expect(mime.type("tcl")).toEqual("application/x-tcl");
    expect(mime.type("tex")).toEqual("application/x-tex");
    expect(mime.type("tfm")).toEqual("application/x-tex-tfm");
    expect(mime.type("texi")).toEqual("application/x-texinfo");
    expect(mime.type("texinfo")).toEqual("application/x-texinfo");
    expect(mime.type("ustar")).toEqual("application/x-ustar");
    expect(mime.type("src")).toEqual("application/x-wais-source");
    expect(mime.type("crt")).toEqual("application/x-x509-ca-cert");
    expect(mime.type("der")).toEqual("application/x-x509-ca-cert");
    expect(mime.type("fig")).toEqual("application/x-xfig");
    expect(mime.type("xpi")).toEqual("application/x-xpinstall");
    expect(mime.type("zip")).toEqual("application/zip-compressed");
    expect(mime.type("xenc")).toEqual("application/xenc+xml");
    expect(mime.type("xht")).toEqual("application/xhtml+xml");
    expect(mime.type("xhtml")).toEqual("application/xhtml+xml");
    expect(mime.type("xpdl")).toEqual("application/xml");
    expect(mime.type("xsl")).toEqual("application/xml");
    expect(mime.type("dtd")).toEqual("application/xml-dtd");
    expect(mime.type("xop")).toEqual("application/xop+xml");
    expect(mime.type("xslt")).toEqual("application/xslt+xml");
    expect(mime.type("xspf")).toEqual("application/xspf+xml");
    expect(mime.type("mxml")).toEqual("application/xv+xml");
    expect(mime.type("xhvml")).toEqual("application/xv+xml");
    expect(mime.type("xvm")).toEqual("application/xv+xml");
    expect(mime.type("xvml")).toEqual("application/xv+xml");
    expect(mime.type("yaml")).toEqual("application/yaml");
    expect(mime.type("yml")).toEqual("application/yaml");
    expect(mime.type("3g2")).toEqual("video/3gpp2");
    expect(mime.type("aac")).toEqual("audio/aac");
    expect(mime.type("m4a")).toEqual("audio/mp4");
    expect(mime.type("aacp")).toEqual("audio/aacp");
    expect(mime.type("adp")).toEqual("audio/adpcm");
    expect(mime.type("aiff")).toEqual("audio/aiff");
    expect(mime.type("aif")).toEqual("audio/aiff");
    expect(mime.type("aff")).toEqual("audio/aiff");
    expect(mime.type("au")).toEqual("audio/basic");
    expect(mime.type("snd")).toEqual("audio/basic");
    expect(mime.type("flac")).toEqual("audio/flac");
    expect(mime.type("kar")).toEqual("audio/midi");
    expect(mime.type("mid")).toEqual("audio/midi");
    expect(mime.type("midi")).toEqual("audio/midi");
    expect(mime.type("rmi")).toEqual("audio/midi");
    expect(mime.type("mp4")).toEqual("video/mp4");
    expect(mime.type("m4b")).toEqual("audio/mp4");
    expect(mime.type("m4p")).toEqual("audio/mp4");
    expect(mime.type("m4r")).toEqual("audio/mp4");
    expect(mime.type("m4v")).toEqual("video/x-m4v");
    expect(mime.type("mp4v")).toEqual("video/mp4");
    expect(mime.type("3gp")).toEqual("video/3gpp");
    expect(mime.type("3ga")).toEqual("audio/mp4");
    expect(mime.type("3gpa")).toEqual("audio/mp4");
    expect(mime.type("3gpp")).toEqual("audio/mp4");
    expect(mime.type("3gpp2")).toEqual("audio/mp4");
    expect(mime.type("3gp2")).toEqual("audio/mp4");
    expect(mime.type("m2a")).toEqual("audio/mpeg");
    expect(mime.type("m3a")).toEqual("audio/mpeg");
    expect(mime.type("mp2")).toEqual("audio/mpeg");
    expect(mime.type("mp2a")).toEqual("audio/mpeg");
    expect(mime.type("mp3")).toEqual("audio/mpeg");
    expect(mime.type("mpga")).toEqual("audio/mpeg");
    expect(mime.type("oga")).toEqual("audio/ogg");
    expect(mime.type("ogg")).toEqual("audio/ogg");
    expect(mime.type("spx")).toEqual("audio/ogg");
    expect(mime.type("opus")).toEqual("audio/opus");
    expect(mime.type("eol")).toEqual("audio/vnd.digital-winds");
    expect(mime.type("dts")).toEqual("audio/vnd.dts");
    expect(mime.type("dtshd")).toEqual("audio/vnd.dts.hd");
    expect(mime.type("lvp")).toEqual("audio/vnd.lucent.voice");
    expect(mime.type("pya")).toEqual("audio/vnd.ms-playready.media.pya");
    expect(mime.type("ecelp4800")).toEqual("audio/vnd.nuera.ecelp4800");
    expect(mime.type("ecelp7470")).toEqual("audio/vnd.nuera.ecelp7470");
    expect(mime.type("ecelp9600")).toEqual("audio/vnd.nuera.ecelp9600");
    expect(mime.type("wav")).toEqual("audio/vnd.wav");
    expect(mime.type("weba")).toEqual("audio/webm");
    expect(mime.type("mka")).toEqual("audio/x-matroska");
    expect(mime.type("m3u")).toEqual("audio/x-mpegurl");
    expect(mime.type("wax")).toEqual("audio/x-ms-wax");
    expect(mime.type("wma")).toEqual("audio/x-ms-wma");
    expect(mime.type("ra")).toEqual("audio/x-pn-realaudio");
    expect(mime.type("ram")).toEqual("audio/x-pn-realaudio");
    expect(mime.type("rmp")).toEqual("audio/x-pn-realaudio-plugin");
    expect(mime.type("cdx")).toEqual("chemical/x-cdx");
    expect(mime.type("cif")).toEqual("chemical/x-cif");
    expect(mime.type("cmdf")).toEqual("chemical/x-cmdf");
    expect(mime.type("cml")).toEqual("chemical/x-cml");
    expect(mime.type("csml")).toEqual("chemical/x-csml");
    expect(mime.type("xyz")).toEqual("chemical/x-xyz");
    expect(mime.type("woff")).toEqual("font/woff");
    expect(mime.type("woff2")).toEqual("font/woff2");
    expect(mime.type("gcode")).toEqual("gcode");
    expect(mime.type("avif")).toEqual("image/avif");
    expect(mime.type("avifs")).toEqual("image/avif");
    expect(mime.type("bmp")).toEqual("image/bmp");
    expect(mime.type("cgm")).toEqual("image/cgm");
    expect(mime.type("g3")).toEqual("image/g3fax");
    expect(mime.type("gif")).toEqual("image/gif");
    expect(mime.type("heif")).toEqual("image/heic");
    expect(mime.type("heic")).toEqual("image/heic");
    expect(mime.type("ief")).toEqual("image/ief");
    expect(mime.type("jpe")).toEqual("image/pjpeg");
    expect(mime.type("jpeg")).toEqual("image/pjpeg");
    expect(mime.type("jpg")).toEqual("image/pjpeg");
    expect(mime.type("pjpg")).toEqual("image/pjpeg");
    expect(mime.type("jfif")).toEqual("image/pjpeg");
    expect(mime.type("jfif-tbnl")).toEqual("image/pjpeg");
    expect(mime.type("jif")).toEqual("image/pjpeg");
    expect(mime.type("jfi")).toEqual("image/pjpeg");
    expect(mime.type("png")).toEqual("image/png");
    expect(mime.type("btif")).toEqual("image/prs.btif");
    expect(mime.type("svg")).toEqual("image/svg+xml");
    expect(mime.type("svgz")).toEqual("image/svg+xml");
    expect(mime.type("tif")).toEqual("image/tiff");
    expect(mime.type("tiff")).toEqual("image/tiff");
    expect(mime.type("psd")).toEqual("image/vnd.adobe.photoshop");
    expect(mime.type("djv")).toEqual("image/vnd.djvu");
    expect(mime.type("djvu")).toEqual("image/vnd.djvu");
    expect(mime.type("dwg")).toEqual("image/vnd.dwg");
    expect(mime.type("dxf")).toEqual("image/vnd.dxf");
    expect(mime.type("fbs")).toEqual("image/vnd.fastbidsheet");
    expect(mime.type("fpx")).toEqual("image/vnd.fpx");
    expect(mime.type("fst")).toEqual("image/vnd.fst");
    expect(mime.type("mmr")).toEqual("image/vnd.fujixerox.edmics-mmr");
    expect(mime.type("rlc")).toEqual("image/vnd.fujixerox.edmics-rlc");
    expect(mime.type("mdi")).toEqual("image/vnd.ms-modi");
    expect(mime.type("npx")).toEqual("image/vnd.net-fpx");
    expect(mime.type("wbmp")).toEqual("image/vnd.wap.wbmp");
    expect(mime.type("xif")).toEqual("image/vnd.xiff");
    expect(mime.type("webp")).toEqual("image/webp");
    expect(mime.type("dng")).toEqual("image/x-adobe-dng");
    expect(mime.type("cr2")).toEqual("image/x-canon-cr2");
    expect(mime.type("crw")).toEqual("image/x-canon-crw");
    expect(mime.type("ras")).toEqual("image/x-cmu-raster");
    expect(mime.type("cmx")).toEqual("image/x-cmx");
    expect(mime.type("erf")).toEqual("image/x-epson-erf");
    expect(mime.type("fh")).toEqual("image/x-freehand");
    expect(mime.type("fh4")).toEqual("image/x-freehand");
    expect(mime.type("fh5")).toEqual("image/x-freehand");
    expect(mime.type("fh7")).toEqual("image/x-freehand");
    expect(mime.type("fhc")).toEqual("image/x-freehand");
    expect(mime.type("raf")).toEqual("image/x-fuji-raf");
    expect(mime.type("icns")).toEqual("image/x-icns");
    expect(mime.type("ico")).toEqual("image/x-icon");
    expect(mime.type("k25")).toEqual("image/x-kodak-k25");
    expect(mime.type("kdc")).toEqual("image/x-kodak-kdc");
    expect(mime.type("mrw")).toEqual("image/x-minolta-mrw");
    expect(mime.type("nef")).toEqual("image/x-nikon-nef");
    expect(mime.type("orf")).toEqual("image/x-olympus-orf");
    expect(mime.type("raw")).toEqual("image/x-panasonic-raw");
    expect(mime.type("rw2")).toEqual("image/x-panasonic-raw");
    expect(mime.type("rwl")).toEqual("image/x-panasonic-raw");
    expect(mime.type("pcx")).toEqual("image/x-pcx");
    expect(mime.type("pef")).toEqual("image/x-pentax-pef");
    expect(mime.type("ptx")).toEqual("image/x-pentax-pef");
    expect(mime.type("pct")).toEqual("image/x-pict");
    expect(mime.type("pic")).toEqual("image/x-pict");
    expect(mime.type("pnm")).toEqual("image/x-portable-anymap");
    expect(mime.type("pbm")).toEqual("image/x-portable-bitmap");
    expect(mime.type("pgm")).toEqual("image/x-portable-graymap");
    expect(mime.type("ppm")).toEqual("image/x-portable-pixmap");
    expect(mime.type("rgb")).toEqual("image/x-rgb");
    expect(mime.type("x3f")).toEqual("image/x-sigma-x3f");
    expect(mime.type("arw")).toEqual("image/x-sony-arw");
    expect(mime.type("sr2")).toEqual("image/x-sony-sr2");
    expect(mime.type("srf")).toEqual("image/x-sony-srf");
    expect(mime.type("xbm")).toEqual("image/x-xbitmap");
    expect(mime.type("xpm")).toEqual("image/x-xpixmap");
    expect(mime.type("xwd")).toEqual("image/x-xwindowdump");
    expect(mime.type("eml")).toEqual("message/rfc822");
    expect(mime.type("mht")).toEqual("message/rfc822");
    expect(mime.type("mhtml")).toEqual("message/rfc822");
    expect(mime.type("mime")).toEqual("message/rfc822");
    expect(mime.type("nws")).toEqual("message/rfc822");
    expect(mime.type("iges")).toEqual("model/iges");
    expect(mime.type("igs")).toEqual("model/iges");
    expect(mime.type("mesh")).toEqual("model/mesh");
    expect(mime.type("msh")).toEqual("model/mesh");
    expect(mime.type("silo")).toEqual("model/mesh");
    expect(mime.type("dwf")).toEqual("model/vnd.dwf");
    expect(mime.type("gdl")).toEqual("model/vnd.gdl");
    expect(mime.type("gtw")).toEqual("model/vnd.gtw");
    expect(mime.type("mts")).toEqual("model/vnd.mts");
    expect(mime.type("vtu")).toEqual("model/vnd.vtu");
    expect(mime.type("vrml")).toEqual("model/vrml");
    expect(mime.type("wrl")).toEqual("model/vrml");
    expect(mime.type("test")).toEqual("test/mimetype");
    expect(mime.type("ics")).toEqual("text/calendar");
    expect(mime.type("ifb")).toEqual("text/calendar");
    expect(mime.type("css")).toEqual("text/css");
    expect(mime.type("csv")).toEqual("text/csv");
    expect(mime.type("htm")).toEqual("text/html");
    expect(mime.type("html")).toEqual("text/html");
    expect(mime.type("js")).toEqual("text/javascript");
    expect(mime.type("md")).toEqual("text/markdown");
    expect(mime.type("markdown")).toEqual("text/markdown");
    expect(mime.type("mdown")).toEqual("text/markdown");
    expect(mime.type("markdn")).toEqual("text/markdown");
    expect(mime.type("conf")).toEqual("text/plain");
    expect(mime.type("def")).toEqual("text/plain");
    expect(mime.type("diff")).toEqual("text/plain");
    expect(mime.type("in")).toEqual("text/plain");
    expect(mime.type("ksh")).toEqual("text/plain");
    expect(mime.type("list")).toEqual("text/plain");
    expect(mime.type("log")).toEqual("text/plain");
    expect(mime.type("text")).toEqual("text/plain");
    expect(mime.type("txt")).toEqual("text/plain");
    expect(mime.type("dsc")).toEqual("text/prs.lines.tag");
    expect(mime.type("rtx")).toEqual("text/richtext");
    expect(mime.type("sgm")).toEqual("text/sgml");
    expect(mime.type("sgml")).toEqual("text/sgml");
    expect(mime.type("tsv")).toEqual("text/tab-separated-values");
    expect(mime.type("man")).toEqual("text/troff");
    expect(mime.type("me")).toEqual("text/troff");
    expect(mime.type("ms")).toEqual("text/troff");
    expect(mime.type("roff")).toEqual("text/troff");
    expect(mime.type("t")).toEqual("text/troff");
    expect(mime.type("tr")).toEqual("text/troff");
    expect(mime.type("uri")).toEqual("text/uri-list");
    expect(mime.type("uris")).toEqual("text/uri-list");
    expect(mime.type("urls")).toEqual("text/uri-list");
    expect(mime.type("curl")).toEqual("text/vnd.curl");
    expect(mime.type("dcurl")).toEqual("text/vnd.curl.dcurl");
    expect(mime.type("mcurl")).toEqual("text/vnd.curl.mcurl");
    expect(mime.type("scurl")).toEqual("text/vnd.curl.scurl");
    expect(mime.type("fly")).toEqual("text/vnd.fly");
    expect(mime.type("flx")).toEqual("text/vnd.fmi.flexstor");
    expect(mime.type("gv")).toEqual("text/vnd.graphviz");
    expect(mime.type("3dml")).toEqual("text/vnd.in3d.3dml");
    expect(mime.type("spot")).toEqual("text/vnd.in3d.spot");
    expect(mime.type("jad")).toEqual("text/vnd.sun.j2me.app-descriptor");
    expect(mime.type("si")).toEqual("text/vnd.wap.si");
    expect(mime.type("sl")).toEqual("text/vnd.wap.sl");
    expect(mime.type("wml")).toEqual("text/vnd.wap.wml");
    expect(mime.type("wmls")).toEqual("text/vnd.wap.wmlscript");
    expect(mime.type("asm")).toEqual("text/x-asm");
    expect(mime.type("s")).toEqual("text/x-asm");
    expect(mime.type("c")).toEqual("text/x-c");
    expect(mime.type("cc")).toEqual("text/x-c");
    expect(mime.type("cpp")).toEqual("text/x-c");
    expect(mime.type("cxx")).toEqual("text/x-c");
    expect(mime.type("dic")).toEqual("text/x-c");
    expect(mime.type("h")).toEqual("text/x-c");
    expect(mime.type("hh")).toEqual("text/x-c");
    expect(mime.type("f")).toEqual("text/x-fortran");
    expect(mime.type("f77")).toEqual("text/x-fortran");
    expect(mime.type("f90")).toEqual("text/x-fortran");
    expect(mime.type("for")).toEqual("text/x-fortran");
    expect(mime.type("java")).toEqual("text/x-java-source");
    expect(mime.type("p")).toEqual("text/x-pascal");
    expect(mime.type("pas")).toEqual("text/x-pascal");
    expect(mime.type("pp")).toEqual("text/x-pascal");
    expect(mime.type("inc")).toEqual("text/x-pascal");
    expect(mime.type("py")).toEqual("text/x-python");
    expect(mime.type("etx")).toEqual("text/x-setext");
    expect(mime.type("uu")).toEqual("text/x-uuencode");
    expect(mime.type("vcs")).toEqual("text/x-vcalendar");
    expect(mime.type("vcf")).toEqual("text/x-vcard");
    expect(mime.type("h261")).toEqual("video/h261");
    expect(mime.type("h263")).toEqual("video/h263");
    expect(mime.type("h264")).toEqual("video/h264");
    expect(mime.type("jpgv")).toEqual("video/jpeg");
    expect(mime.type("jpgm")).toEqual("video/jpm");
    expect(mime.type("jpm")).toEqual("video/jpm");
    expect(mime.type("mj2")).toEqual("video/mj2");
    expect(mime.type("mjp2")).toEqual("video/mj2");
    expect(mime.type("ts")).toEqual("video/mp2t");
    expect(mime.type("mpg4")).toEqual("video/mp4");
    expect(mime.type("m1v")).toEqual("video/mpeg");
    expect(mime.type("m2v")).toEqual("video/mpeg");
    expect(mime.type("mpa")).toEqual("video/mpeg");
    expect(mime.type("mpe")).toEqual("video/mpeg");
    expect(mime.type("mpeg")).toEqual("video/mpeg");
    expect(mime.type("mpg")).toEqual("video/mpeg");
    expect(mime.type("ogv")).toEqual("video/ogg");
    expect(mime.type("mov")).toEqual("video/quicktime");
    expect(mime.type("qt")).toEqual("video/quicktime");
    expect(mime.type("fvt")).toEqual("video/vnd.fvt");
    expect(mime.type("m4u")).toEqual("video/vnd.mpegurl");
    expect(mime.type("mxu")).toEqual("video/vnd.mpegurl");
    expect(mime.type("pyv")).toEqual("video/vnd.ms-playready.media.pyv");
    expect(mime.type("viv")).toEqual("video/vnd.vivo");
    expect(mime.type("webm")).toEqual("video/webm");
    expect(mime.type("f4v")).toEqual("video/x-f4v");
    expect(mime.type("fli")).toEqual("video/x-fli");
    expect(mime.type("flv")).toEqual("video/x-flv");
    expect(mime.type("mkv")).toEqual("video/x-matroska");
    expect(mime.type("asf")).toEqual("video/x-ms-asf");
    expect(mime.type("asx")).toEqual("video/x-ms-asf");
    expect(mime.type("wm")).toEqual("video/x-ms-wm");
    expect(mime.type("wmv")).toEqual("video/x-ms-wmv");
    expect(mime.type("wmx")).toEqual("video/x-ms-wmx");
    expect(mime.type("wvx")).toEqual("video/x-ms-wvx");
    expect(mime.type("avi")).toEqual("video/x-msvideo");
    expect(mime.type("movie")).toEqual("video/x-sgi-movie");
    expect(mime.type("ice")).toEqual("x-conference/x-cooltalk");
  });

  it("Should return null when extension is invalid", async () => {
    expect(mime.type("invalid")).toEqual(null);
  });
});
